<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>https://danybmx.github.io/blog/</link>
    <atom:link href="https://danybmx.github.io/blog//feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Fri, 20 Apr 2018 21:16:10 +0000</pubDate>
    <lastBuildDate>Fri, 20 Apr 2018 21:16:10 +0000</lastBuildDate>

    <item>
      <title>My &apos;cheap&apos; devops stack</title>
      <link>https://danybmx.github.io/blog//blog/2018/my-cheap-devops-stack.html</link>
      <pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2018/my-cheap-devops-stack.html</guid>
      	<description>
	&lt;p&gt;This past week I listen a few times &quot;Spot Instances&quot; while my workmates talk about our CI environment. When I arrive my home, I just start to read about AWS Spot Instances, and well... for CI they&apos;re pretty awesome. The thing is that AWS offer the instances that are not in use with a lower price, the instances are the same that the ones you create on-demand except for one thing, AWS can claim and stop them with only two minutes in advance. This last part doesn&apos;t matter in a big way to e2e tests or build tasks if you can try them in another moment.&lt;/p&gt;
&lt;p&gt;So, I start to put together things that learn lately and finally the idea of mount a GitLab + Docker registry + CI-runner comes up. I want to run this all on a small 15â‚¬ VPS server that I rent for my personal projects. That projects are small, but some of them are in &quot;production&quot; and I don&apos;t want to hit the performance only because I made some changes and the CI starts to do tests, package .jars and build docker images. Here is where the spot instances will &quot;save my life&quot; the ci-runner will only manage the spot-instance request and the build status the &quot;heavy&quot; compute things will be done in AWS.&lt;/p&gt;
&lt;p&gt;Well, I spent a long afternoon but finally I got everything working!! but... a new problem pops up... cache between instances... If the CI runs a build on an instance that finally shutdowns due to inactivity, next time that the CI will run, should download all the node/java dependencies and that&apos;s a little bit slow. So what can I do? configure S3 as cache storage!&lt;/p&gt;
&lt;p&gt;I&apos;ll split this &quot;how-to&quot; into two posts, this is the first and we will get at the end a local (or in a VPS) gitlab-ce with a docker-registry and a gitlab-runner, all running over docker!&lt;/p&gt;
&lt;h3&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;First of all, you should have installed this tools on your VPS or computer:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;docker-engine: just docker :P&lt;/li&gt;
  &lt;li&gt;docker-compose: will help us to manage docker instances and have them all connected.&lt;/li&gt;
  &lt;li&gt;docker-machine: will allow gitlab-ci-runner to connect to AWS instance and register it as a docker-machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are my current versions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;daniel@vps:/home/gitlab$ docker -v
Docker version 17.12.1-ce, build 7390fc6
daniel@vps:/home/gitlab$ docker-compose -v
docker-compose version 1.8.0, build unknown
daniel@vps:/home/gitlab$ docker-machine -v
docker-machine version 0.14.0, build 89b8332
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Step 1. Introduction to the docker-compose file&lt;/h3&gt;
&lt;p&gt;I want to really thanks to this guy &lt;a href=&quot;https://github.com/sameersbn&quot;&gt;github.com/sameersbn&lt;/a&gt; for create this pretty nice docker image and a &lt;a href=&quot;https://github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml&quot;&gt;github.com/sameersbn/docker-gitlab/blob/master/docker-compose.yml&lt;/a&gt; that do all the work... It&apos;s quite easy to work with well-documented projects like this.&lt;/p&gt;
&lt;p&gt;The docker-compose.yml file that I will reference below are published on &lt;a href=&quot;https://github.com/danybmx/my-cheap-devops-stack&quot;&gt;github.com/danybmx/my-cheap-devops&lt;/a&gt;. You can go there and do a FF to this post!&lt;/p&gt;
&lt;h4&gt;Gitlab&lt;/h4&gt;
&lt;p&gt;Well as I said, that guys offer a docker-compose.yml that do everything so I just copied it and clean it up to configure only with my needs.&lt;/p&gt;
&lt;p&gt;If you want to remove the docker registry, just remove the registry service and the REGISTRY_* environment values from &lt;code&gt;gitlab&lt;/code&gt; service.&lt;/p&gt;
&lt;p&gt;You should replace {{HOST_IP}} on this docker-compose.yml with your host machine IP or public IP as you prefer.&lt;/p&gt;
&lt;p&gt;This docker-compose basically start 5 instances for run gitlab-ce with ci-runners and docker-registry.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;sameersbn/redis&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;There are no so much to comment on this, the configuration is basically the image and a volume for persist the data.&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;sameersbn/postgresql&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;As in the previous service, here we configure another volume for persist the data and also set following environment values (replace with your owns):&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;DB_USER=gitlab&lt;/li&gt;
          &lt;li&gt;DB_PASS=RM4L6X6An4wpLKQE&lt;/li&gt;
          &lt;li&gt;DB_NAME=gitlabhq&lt;/li&gt;
          &lt;li&gt;DB_EXTENSION=pg_trgm&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;This image will create this user the first time it run and also the database, so we should use this info in the gitlab service.&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;sameersbn/gitlab&lt;/strong&gt; (this is the bigger one :P)&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;As in the previous service, we configure one volume for persisting data&lt;/li&gt;
      &lt;li&gt;Set two port bindings in this case, but this is just because is prepared to work on your computer. In production, I doesn&apos;t like to expose ports on the host so I prefer to have a proxy (maybe I can write a future post with this)&lt;/li&gt;
      &lt;li&gt;Set that this instance depends on redis and postgresql to be sure that docker doesn&apos;t start this machine if the database fails. In the case of registry, we add it too to this list&lt;/li&gt;
      &lt;li&gt;Environment vars, there are a lot!
        &lt;ul&gt;
          &lt;li&gt;DB_*: Fill it up with the previous data&lt;/li&gt;
          &lt;li&gt;REDUS_*: Fill it up with the previous data&lt;/li&gt;
          &lt;li&gt;GITLAB_HOST: The host that will expose gitlab over the network (the domain or host IP)&lt;/li&gt;
          &lt;li&gt;GITLAB_PORT: HTTP Port of gitlab on the GITLAB_HOST that is exposed to the network&lt;/li&gt;
          &lt;li&gt;GITLAB_SSH_PORT: This is the ssh port on the GITLAB_HOST that is exposed to the network and allows you to connect by SSH to the gitlab instance (use git through ssh)&lt;/li&gt;
          &lt;li&gt;GITLAB_SECRETS_*: gitlab use this internally for encrypt/decrypt replace them with another ones :)&lt;/li&gt;
          &lt;li&gt;GITLAB_ROOT_EMAIL: This will be the admin login&lt;/li&gt;
          &lt;li&gt;GITLAB_ROOT_PASSWORD: This will be the admin password&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;gitlab/gitlab-runner&lt;/strong&gt; the ci-runner&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Here we set two volumes, one for have access to the config.toml file and other for share the host machine docker socket with it. This is a need if you want to use (docker inside docker) dind.&lt;/p&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;registry&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Expose port 5000 to allow communication between instances on the same network (docker-compose generates a default network for their machines)&lt;/li&gt;
      &lt;li&gt;Bind host port 9001 to the 5000 for allowing the access from the network (as in the gitlab, IMHO this is ugly on production)&lt;/li&gt;
      &lt;li&gt;We create two volumes here, one is for persisting the registry repository and the other is for the certificates that should be shared with gitlab service.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We need to set following environment variables to link it with gitlab:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: Path where images will be stored&lt;/li&gt;
          &lt;li&gt;REGISTRY_AUTH_TOKEN_REALM: Address to the gitlab jwt authentication&lt;/li&gt;
          &lt;li&gt;REGISTRY_AUTH_TOKEN_SERVICE: This should be &quot;container_registry&quot;&lt;/li&gt;
          &lt;li&gt;REGISTRY_AUTH_TOKEN_ISSUER: The certificate&apos;s issuer&lt;/li&gt;
          &lt;li&gt;REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: Path to the root certificate&lt;/li&gt;
          &lt;li&gt;REGISTRY_STORAGE_DELETE_ENABLED: This allows to delete images&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;For run the registry this others environment variables should be added to the gitlab service:&lt;/p&gt;
        &lt;ul&gt;
          &lt;li&gt;GITLAB_REGISTRY_ENABLED: Just should be true&lt;/li&gt;
          &lt;li&gt;GITLAB_REGISTRY_HOST: The host URL under which the Registry will run and the users will be able to use.&lt;/li&gt;
          &lt;li&gt;GITLAB_REGISTRY_PORT: The port under which the external Registry domain will listen on.&lt;/li&gt;
          &lt;li&gt;GITLAB_REGISTRY_API_URL: The internal API URL under which the Registry is exposed to.&lt;/li&gt;
          &lt;li&gt;GITLAB_REGISTRY_KEY_PATH: Path to the certificates (did you remember the shared volumes?)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Step 2. Generate certificates&lt;/h3&gt;
&lt;p&gt;I&apos;ve created a bash script for generating needed certificates, it can be found at &lt;a href=&quot;https://github.com/danybmx/my-cheap-devops/create-registry-certificates.sh&quot;&gt;github.com/danybmx/my-cheap-devops/create-registry-certificates.sh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can fill the data you want on the script but don&apos;t worry about it, this only will be used for internal communication between registry and gitlab.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sh create-registry-certificates.sh
Generating a 2048 bit RSA private key
..................+++
..................................................+++
writing new private key to &amp;#39;registry.key&amp;#39;
-----
Signature ok
subject=/C=ES/ST=PO/L=Vigo/O=Registry/OU=Registry/CN=registry
Getting Private key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensure that the &lt;code&gt;certs&lt;/code&gt; folder is in the same folder as the docker-compose.yml file and that&apos;s all!&lt;/p&gt;
&lt;h3&gt;Step 3. Run instances!&lt;/h3&gt;
&lt;p&gt;Now, you just need to run the instances and wait until gitlab are available! How? just run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker-compose up -d
$ docker-compose logs -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;-f&lt;/code&gt; option on docker-compose gives you the option to chose the config file instead use the default.&lt;/p&gt;
&lt;p&gt;We run the &lt;code&gt;up&lt;/code&gt; with &lt;code&gt;-d&lt;/code&gt; for start in detached mode and then show the logs with &lt;code&gt;-f&lt;/code&gt; follow options. This allows you to Ctrl-c without stop the instances.&lt;/p&gt;
&lt;p&gt;Now, access to &lt;a href=&quot;http://localhost:9000/&quot;&gt;localhost:9000/&lt;/a&gt;!. It will show you a 502 at the beggining, you should wait and refresh until it works. This is just because gitlab is still starting.&lt;/p&gt;
&lt;p&gt;After a while, you should see your own gitlab-ce login page!, the login info is the one that you have set on the docker-compose file &lt;code&gt;GITLAB_ROOT_EMAIL&lt;/code&gt; and &lt;code&gt;GITLAB_ROOT_PASSWORD&lt;/code&gt;. Or just register for an account without admin permissions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/img/posts/gitlab-ce/gitlab-login-page.png&quot; alt=&quot;Gitlab login page&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Create a test project and that&apos;s all, you have, gitlab running and also the registry if you have chosen that option!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/img/posts/gitlab-ce/gitlab-test-project-registry.png&quot; alt=&quot;Gitlab project docker registry&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;Step 4. Register a gitlab-ci-runner&lt;/h3&gt;
&lt;p&gt;Well, we launched all the stack but we didn&apos;t register any ci-runner on gitlab, go ahead.&lt;/p&gt;
&lt;p&gt;First of all, login on your gitlab as admin and go to /admin/runners &lt;a href=&quot;http://localhost:9000/admin/runners&quot;&gt;localhost:9000/admin/runners&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once here, you will see a token, copy it.&lt;/p&gt;
&lt;p&gt;Go to the terminal, and navigate to the path where the docker-compose files are. Once there, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker-compose exec ci_runner gitlab-runner register
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will execute the &lt;code&gt;gitlab-runner register&lt;/code&gt; command inside the runner instance and this will prompt you for some data in order to register the runner.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Please enter the gitlab-ci coordinator URL (e.g. &lt;a href=&quot;https://gitlab.com/&quot;&gt;https://gitlab.com/&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Here you should write the internal http url to reach gitlab, in our case should be &lt;code&gt;http://gitlab&lt;/code&gt; since &lt;code&gt;gitlab&lt;/code&gt; is the name of the service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Please enter the gitlab-ci token for this runner:
    &lt;ul&gt;
      &lt;li&gt;Just paste the token you copied on the website.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Please enter the gitlab-ci description for this runner:
    &lt;ul&gt;
      &lt;li&gt;A description for identify the runner from gitlab, I keep it with the default.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Please enter the gitlab-ci tags for this runner (comma separated):
    &lt;ul&gt;
      &lt;li&gt;I keep this blank too&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Whether to lock the Runner to current project [true/false]:
    &lt;ul&gt;
      &lt;li&gt;Here I put false, if it&apos;s true, the runner will run only for a specific project.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Please enter the executor: docker, shell, ssh, docker-ssh+machine, docker-ssh, parallels, virtualbox, docker+machine, kubernetes:
    &lt;ul&gt;
      &lt;li&gt;docker&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Please enter the default Docker image (e.g. ruby:2.1):
    &lt;ul&gt;
      &lt;li&gt;alpine&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&apos;s all, refresh the website and you&apos;ll have a new ci-runner waiting!&lt;/p&gt;
&lt;h3&gt;Step 5. Create a test pipeline&lt;/h3&gt;
&lt;p&gt;Just clone the test-project that you&apos;ve created:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone http://localhost:9000/{{user}}/test-project.git
cd test-project
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create on it a .gitlab-ci.yml file with following content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;image: alpine:latest

stages:
  - build
  - test
  - deploy

build:
  stage: build
  script:
  - echo &amp;quot;I&amp;#39;m building&amp;quot;

test:
  stage: test
  script:
  - echo &amp;quot;I&amp;#39;m testing&amp;quot;

deploy:
  stage: deploy
  script:
  - echo &amp;quot;I&amp;#39;m deploying&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Commit and push the change:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git add .gitlab-ci.yml
git commit -m &amp;quot;First ci-runner test!&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Go to the website and see how pipelines pass (or not... and you should debug a little bit hehe) &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/blog/img/posts/gitlab-ce/gitlab-success.png&quot; alt=&quot;Gitlab success pipeline&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Now you should play with .gitlab-ci.yml options, and adapt it to your project. Maybe when finish this posts series I&apos;ll try to show what I do on my personal builds.&lt;/p&gt;
&lt;p&gt;On next post we will see how to use AWS Spot instances as machines for launch our tests/builds and how to configure S3 as cache. Go to AWS and create your account!&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>Hello jbake and travis</title>
      <link>https://danybmx.github.io/blog//blog/2018/hello-travis.html</link>
      <pubDate>Sun, 15 Apr 2018 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2018/hello-travis.html</guid>
      	<description>
	&lt;p&gt;Yesterday I published this blog on GitHub, it was so easy, just download jbake, run it, change some templates and I be able to start writing my first post...&lt;/p&gt;
&lt;p&gt;I found out jbake when trying to apport something to the &lt;a href=&quot;http://www.vigojug.org/&quot;&gt;VigoJUG&lt;/a&gt;. They use jbake for their website and the first time I see it, it was strange... When I need to create a simple static website I just download any PHP framework, install it, and create every page. if I need to do something dynamic, just use MySQL or SQLite. That&apos;s great but you need a hosting with PHP and also MySQL or SQLite, with jbake you can have a pseudo-dynamic website powered with markdown files in just a few steps, and the better is that you finally get a static HTML site that can be published everywhere, also in GitHub pages.&lt;/p&gt;
&lt;p&gt;The problem here was that you need to run &lt;code&gt;./gradlew clean bake&lt;/code&gt; on your computer and then do a &lt;code&gt;git commit -m &amp;quot;xxx&amp;quot;&lt;/code&gt; and a &lt;code&gt;git push&lt;/code&gt;. That&apos;s a little bit tedious since you need to have Java (is not a problem at all If you do it on your computer but is a good excuse haha), so I went to the &lt;a href=&quot;https://github.com/vigojug/vigojug.github.io&quot;&gt;vigojug/vigojug.github.io&lt;/a&gt; repository to see how they do this process and I realise that they use travis-ci to bake the site and then push to another branch.&lt;/p&gt;
&lt;p&gt;It was interesting so I tried to do it and after some mistakes (: it was working!&lt;/p&gt;
&lt;h4&gt;Here are the steps that I followed:&lt;/h4&gt;
&lt;h5&gt;1. Create travis-ci project.&lt;/h5&gt;
&lt;p&gt;Go to &lt;a href=&quot;https://travis-ci.com&quot;&gt;travis-ci.com&lt;/a&gt; website and sign in with GitHub, once logged in, click on the plus sign that appears on the left sidebar and activate the repository that you want.&lt;/p&gt;
&lt;h5&gt;2. Create a deployment key for allowing travis-ci to push on the repository.&lt;/h5&gt;
&lt;p&gt;For this just run &lt;code&gt;ssh-keygen&lt;/code&gt; and follow instructions, store this files securely but not in the repository.&lt;/p&gt;
&lt;p&gt;Whats the problem now? Well, ship this key to GitHub is risky but with travis, you can encrypt the key and configure travis for decrypting it before starting the build process.&lt;/p&gt;
&lt;p&gt;Just run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Install travis-cli
gem install travis
# Login in travis-cli
travis login
# Encrypt the rsa-key
travis encrypt-file {your-key-file} -r {github_user}/{github_repo_name}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will show you something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ travis encrypt-file blog-travis -r danybmx/blog
encrypting blog-travis for danybmx/blog
storing result as blog-travis.enc
storing secure env variables for decryption

Please add the following to your build script (before_install stage in your .travis.yml, for instance):

    openssl aes-256-cbc -K $encrypted_xxxxxxxxxxxx_key -iv $encrypted_xxxxxxxxxxxx_iv -in blog-travis.enc -out blog-travis -d

Pro Tip: You can add it automatically by running with --add.

Make sure to add blog-travis.enc to the git repository.
Make sure not to add blog-travis to the git repository.
Commit all changes to your .travis.yml.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Just follow the instructions shown and that&apos;s done!&lt;/p&gt;
&lt;h5&gt;3. Add the deployment key to GitHub repo.&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://www.github.com&quot;&gt;github.com&lt;/a&gt; and navigate to the &lt;code&gt;Settings&lt;/code&gt; of your project, then click &lt;code&gt;Deploy keys&lt;/code&gt; on the sidebar.&lt;/li&gt;
  &lt;li&gt;Click &lt;code&gt;Add deploy key&lt;/code&gt; on the right and fill it with the content of the &lt;code&gt;.pub&lt;/code&gt; file that was generated in the previous step.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;4. Setup gradle for do all the things!&lt;/h5&gt;
&lt;p&gt;I need to build the site with jbake and then push the generated code to a different branch (&lt;code&gt;gh-pages&lt;/code&gt; in my case). Fortunately, gradle has plugins for everything and I can use the following plugins to get this done.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jbake-org/jbake-gradle-plugin&quot;&gt;jbake-gradle-plugin&lt;/a&gt;: Add the &lt;code&gt;bake&lt;/code&gt; task to generate the source from gradle.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ajoberstar/grgit&quot;&gt;grgit&lt;/a&gt;: This is a library that allows gradle to use git directly.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ajoberstar/gradle-git-publish&quot;&gt;gradle-git-publish&lt;/a&gt;: Provide the task &lt;code&gt;gitPublishPush&lt;/code&gt; task along with others that will help us to commit and push the content of a directory to a remote branch.
    &lt;p&gt;You can check how to configure all those plugins in the &lt;a href=&quot;https://github.com/danybmx/blog/blob/master/build.gradle&quot;&gt;github.com/danybmx/blog/blob/master/build.gradle&lt;/a&gt;.&lt;/p&gt;
    &lt;p&gt;Finally, I&apos;ve created a custom task that runs the clean task, followed by the bake task and finally the gitPublishPush that will push the generated content to the gh-pages branch.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;5. Create the &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/h5&gt;
&lt;p&gt;For this case, the travis file is quite simple and short so I&apos;ll paste it here, but you can found it at &lt;a href=&quot;https://github.com/danybmx/blog/blob/master/.travis.yml&quot;&gt;github.com/danybmx/blog/blob/master/.travis.yml&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;language: java
jdk:
- oraclejdk8
before_install:
- openssl aes-256-cbc -K $encrypted_1ecfa12135cc_key -iv $encrypted_1ecfa12135cc_iv -in blog-travis.enc -out blog-travis -d
- export COMMIT_MESSAGE=$(git log -1 --pretty=%B)
script:
- ./gradlew bakeAndPush -Dorg.ajoberstar.grgit.auth.ssh.private=./blog-travis
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;language&lt;/strong&gt;: We need to set a language, Java, in this case, is enough.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;jdk&lt;/strong&gt;: We define the JDK version (jbake shows an error with jdk9... so I keep jdk8 here).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;before_install&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;We need to decode the blog-travis.enc file that is the rsa-key for push into GitHub using the command that &lt;code&gt;travis-cli&lt;/code&gt; shows in step 2.&lt;/li&gt;
      &lt;li&gt;I also create an environment variable with the message of the last commit for use it as commitMessage on the &lt;code&gt;gitPublish&lt;/code&gt; gradle plugin.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;script&lt;/strong&gt;: Here we should define the commands that travis will launch for test/deploy.
    &lt;ul&gt;
      &lt;li&gt;In this case, the &lt;code&gt;./gradlew bakeAndPush&lt;/code&gt; is enough and the &lt;code&gt;-Dorg.ajoberstar.grgit.auth.ssh.private=./blog-travis&lt;/code&gt; is just for indicate where the rsa-key that we use as deployment-key is. &lt;a href=&quot;http://ajoberstar.org/grgit/grgit-authentication.html&quot;&gt;ajoberstar.org/grgit/grgit-authentication.html&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;6. PUSH!&lt;/h5&gt;
&lt;p&gt;We&apos;ve finished! the only thing that we need to do now is push the changes to master and wait to see how travis-ci do the rest. If it fails, just iterate a bit to fix the problems :P&lt;/p&gt;
&lt;h4&gt;More things that we can improve.&lt;/h4&gt;
&lt;p&gt;Push directly to master is not a good practice... maybe use another branch like &lt;code&gt;dev&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt; that just merge with master if travis ends successfully is a good idea, by now, I will maintain it in that way just because this is not an &quot;important&quot; project.&lt;/p&gt;
&lt;p&gt;I hope this can be useful for someone, bye!!&lt;/p&gt;
	</description>
    </item>
    <item>
      <title>A new attemp...</title>
      <link>https://danybmx.github.io/blog//blog/2018/a-new-attemp.html</link>
      <pubDate>Sat, 14 Apr 2018 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">blog/2018/a-new-attemp.html</guid>
      	<description>
	&lt;p&gt;Well, this is not my first attempt to create a blog, it&apos;s like my third... but this last year was a new beginning in my life in what refers to work. I quit my job at the end of 2016 and start a new company. I was so scared, there were more than 10 years working in the &quot;same&quot; company, working in the way that I want because I have no team... It was only me and two more people, but I supported all the technical part.&lt;/p&gt;
&lt;p&gt;I&apos;ve created an invoicing system from the scratch in PHP for the company that should be able to work in the way that they want, manage stock, generate stickers, calculates OEM products needed to create final products... and a lot features more. Also, I&apos;ve got the opportunity to work doing some graphic design, photography, animation and even 3D. It was pretty nice, I&apos;ve learned a lot but... I miss something, a team.&lt;/p&gt;
&lt;p&gt;So, mid-2016, I&apos;ve fixed a mate website (a WordPress that was &quot;hacked&quot;) and he tells me, &quot;I knew a company that was searching for a JS developer&quot;, I was interested so I&apos;ve contacted the company... They were looking for a Java Developer, not JS... and well, my knowledge of Java was pretty low, anyway I went to the technical test and It wasn&apos;t too bad... I need to say that it was my first job interview and I was so nervous but they allow me (and everyone) to use the internet, that helps me a lot. Finally I pass the test but I rejected the job because I didn&apos;t realise that it was for a Junior and the salary was much lower than in the current job (well... I think that the main reason was that I&apos;m really scared and I should say that was a good salary for a Junior job offer).&lt;/p&gt;
&lt;p&gt;3 Months later, the company gets in touch with me again (THANKS), they have a job offer for a Senior developer and arrange me an interview with somebody of the team in which I&apos;ll join. I went and she explains to me what they do, how they work and how the company takes care of their employees, it was just amazing and helps me a lot to take my decision... a few days later I&apos;ve communicated my current company that I&apos;ll leave in about 15 days. Those days were really long for me... I was scared of how things will go... it will be a change from the freedom where I can write programs in the language that I want, without documentation (cause never has time), and working alone to something completely different, a well organised team, focused in Oracle products and Java (JVM), something more serious...&lt;/p&gt;
&lt;p&gt;Late 2016 I&apos;ve started my new job, it was quite nice! I join into a team that helps me a lot and teach me something every day, have all the things well documented, and although there were many new concepts they make it really easy to understand.&lt;/p&gt;
&lt;p&gt;Now, there was more than one year in the company, I keep really impressed about how they get care of their employees, we have ping pong (I&apos;m still so bad), breakfast in time-to-time where someone can talk about any topic, training sessions, playful days... just awesome. And they also support the &lt;a href=&quot;http://www.vigojug.org/&quot;&gt;VigoJUG&lt;/a&gt; (Vigo Java Users Group), where anyone can go to attend their talks (one each month) or even host them and of course, go for a few beers after with best engineers I&apos;ve ever met.&lt;/p&gt;
&lt;p&gt;And that helps me to understand the value of the community and that we have in Vigo a log of meetups about programming! At the moment I only go to the &lt;a href=&quot;http://www.vigojug.org/&quot;&gt;VigoJUG&lt;/a&gt; but there are groups for everything! Python, PHP, JS... is just amazing!. Thank you guys for your big effort!.&lt;/p&gt;
&lt;p&gt;So, this third blog attempt is just because I want to share something with the community from which I get a lot, share the things that I do for my small projects and... practice English! :P I&apos;m sure that you didn&apos;t see any faults in this text! haha. I don&apos;t know, maybe anything ends being useful for anybody.&lt;/p&gt;
	</description>
    </item>

  </channel> 
</rss>
